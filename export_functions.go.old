package main

import (
	"C"
	"fmt"
	"unsafe"

	"github.com/tomoris/PYHSMM/bayselm"
)

//export LoadDataContainer
func LoadDataContainer(trainFilePathForWS string) uintptr {
	dataContainer := bayselm.NewDataContainer(trainFilePathForWS)
	pointer := uintptr(unsafe.Pointer(dataContainer))
	return pointer
}

// GetInstance .
//export GetInstance
func GetInstance(modelName string, initialTheta float64, initialD float64, gammaA float64, gammaB float64, betaA float64, betaB float64, alpha float64, beta float64, maxNgram int, maxWordLength int, posSize int, base float64) uintptr {
	model := bayselm.NewPYHSMM(initialTheta, initialD, gammaA, gammaB, betaA, betaB, alpha, beta, maxNgram, maxWordLength, posSize)
	pointer := uintptr(unsafe.Pointer(model))
	return pointer
}

//export CalcProb
func CalcProb(pointer uintptr, word string, u []string) float64 {
	var model *bayselm.PYHSMM = (*bayselm.PYHSMM)(unsafe.Pointer(pointer))
	p := model.ReturnNgramProb(word, u)
	return p
}

//export Train
func Train(pointer uintptr, dataContainerPtr uintptr, threads int, batch int) {
	var model *bayselm.PYHSMM = (*bayselm.PYHSMM)(unsafe.Pointer(pointer))
	var dataContainer = (*bayselm.DataContainer)(unsafe.Pointer(dataContainerPtr))
	model.TrainWordSegmentationAndPOSTagging(dataContainer, threads, batch)
	return
}

//export Test
func Test(pointer uintptr, sentsStr []string, threads int64) [][]string {
	var model *bayselm.PYHSMM = (*bayselm.PYHSMM)(unsafe.Pointer(pointer))
	var sents [][]rune
	for _, sentStr := range sentsStr {
		fmt.Println(sentStr)
		sent := []rune(sentStr)
		sents = append(sents, sent)
	}
	fmt.Println(threads)
	wordSeqs, _ := model.TestWordSegmentationAndPOSTagging(sents, int(threads))
	fmt.Println("end")
	return wordSeqs
}

//export ShowSliceInt
func ShowSliceInt(slice []int64) {
	fmt.Println(slice)
}

//export ShowSliceFloat
func ShowSliceFloat(slice []float64) {
	fmt.Println(slice)
}

//export ShowSliceString
func ShowSliceString(slice []string) {
	fmt.Println(slice)
}

//export ReturnFloatPtr
func ReturnFloatPtr() uintptr {
	f := float64(24.5)
	fmt.Println(&f, uintptr(unsafe.Pointer(&f)))
	return uintptr(unsafe.Pointer(&f))
}

//export ReturnSliceInt
func ReturnSliceInt() uintptr {
	var s = []int64{1, 2}
	fmt.Println(&s, uintptr(unsafe.Pointer(&s)), uintptr(unsafe.Pointer(&s[0])))
	// hdr := (*reflect.SliceHeader)(unsafe.Pointer(&s))
	// return hdr.Data
	return uintptr(unsafe.Pointer(&s))
}

//export ReturnSliceFloat
func ReturnSliceFloat() uintptr {
	var s = []float64{1.1, 2.2}
	fmt.Println(&s, uintptr(unsafe.Pointer(&s)), uintptr(unsafe.Pointer(&s[0])))
	// hdr := (*reflect.SliceHeader)(unsafe.Pointer(&s))
	// return hdr.Data
	return uintptr(unsafe.Pointer(&s))
}

func main() {}
